version: '3.8'

services:
  backend:
    build: ./backend
    ports:
      - "5000:5000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      - COIN_API_KEY=${COIN_API_KEY}
      - NEWS_API_KEY=${NEWS_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FLASK_ENV=${FLASK_ENV}
      - FLASK_DEBUG=${FLASK_DEBUG}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@${REDIS_HOST}:${REDIS_PORT}/0
      - LOG_LEVEL=${LOG_LEVEL}
      - PREDICTION_INTERVALS=${PREDICTION_INTERVALS}
    depends_on:
      - db
      - redis
    volumes:
      - ./backend:/app
    restart: unless-stopped

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - api-gateway
    restart: unless-stopped

  api-gateway:
    build: ./api-gateway
    ports:
      - "8080:8080"
    environment:
      - BACKEND_URL=http://backend:5000
      - REDIS_URL=redis://:${REDIS_PASSWORD}@${REDIS_HOST}:${REDIS_PORT}/0
      - COIN_API_KEY=${COIN_API_KEY}
      - NEWS_API_KEY=${NEWS_API_KEY}
      - GIN_MODE=${GIN_MODE}
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      - backend
      - redis
    volumes:
      - ./api-gateway:/app
    restart: unless-stopped

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    command: ${REDIS_PASSWORD:+--requirepass ${REDIS_PASSWORD}} redis-server --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped

  db:
    image: postgres:14
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data: 